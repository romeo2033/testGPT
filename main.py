import telebot
from telebot import types

import text
import gpt
from extensions import *

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ù–∞—á–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
@bot.message_handler(commands=['start'])
def start_bot(message):
    register_user(message)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    markup = types.InlineKeyboardMarkup()
    ai_btn = types.InlineKeyboardButton("ü§ñ –ù–∞–ø–∏—Å–∞—Ç—å –ò–ò", callback_data="new_chat")
    topic_btn = types.InlineKeyboardButton("üí° –ò–ò –ø–æ —Ç–µ–º–∞–º", callback_data="new_chat_topic")
    balance_btn = types.InlineKeyboardButton("‚≠êÔ∏è –ë–∞–ª–∞–Ω—Å", callback_data="balance")
    help_btn = types.InlineKeyboardButton("üÜòÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ —Ä—è–¥–∞–º
    markup.row(ai_btn)
    markup.row(topic_btn)
    markup.row(balance_btn, help_btn)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    send_or_edit(message, bot, text.hello, markup)

# –°—á–∏—Ç—ã–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã /balance
@bot.message_handler(commands=['balance'])
# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
def redirect_to_balance(message):
    balance(message)

# –°—á–∏—Ç—ã–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã /ask
@bot.message_handler(commands=['ask'])
def redirect_to_gpt(message):
    ai_chat(message)

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–º–æ—â–∏
@bot.callback_query_handler(func=lambda call: call.data == "help")
def redirect_to_help(call):
    help_message(call)

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∫–∞ "–¥–æ–º–æ–π"
@bot.callback_query_handler(func=lambda call: call.data == 'home')
def home(call):
    start_bot(call)

# –°—á–∏—Ç—ã–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏
def help_message(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data="home"))
    send_or_edit(message,bot,text.help_text,markup=markup)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data == 'balance')
def balance(call):
    user_balance = check_balance(call)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data="home"))
    markup.add(types.InlineKeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data="will_top_up"))

    send_or_edit(call, bot, f'*‚≠êÔ∏è –¢–≤–æ–π –±–∞–ª–∞–Ω—Å:* {user_balance}', markup=markup)

# –ù–æ–≤—ã–π —á–∞—Ç —Å –ò–ò –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–º –æ–±—â–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data == 'new_chat')
def ai_chat(call):
    user_balance = check_balance(call)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
    if user_balance < 5:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data="home"))
        message_text = text.not_enough_balance(user_balance)
        send_or_edit(call, bot, message_text, markup)
    else:
        msg = send_or_edit(call, bot, '–°—É–ø–µ—Ä! –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.')
        bot.register_next_step_handler(msg, send_message_to_gpt)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ò–ò
def send_message_to_gpt(message):
    chat_id = get_id(message)
    bot.delete_message(chat_id=chat_id, message_id=message.message_id-1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç, –∞ –Ω–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç–¥)
    if message.content_type == 'text':
        answer = gpt.get_ai_answer(message.text, 'default')
        if answer.startswith('ü§Ø'):
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data="home"))
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data="home"))
            answer += '\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ–π—á–∞—Å –±–æ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∏ –∑–∞–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å.'
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω
            is_rewarded = gpt_used(message)
            if is_rewarded:
                bot.send_message(chat_id, '‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –º–Ω–æ–π!\n\n*–ó–∞ 5 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 1 –º–æ–Ω–µ—Ç—É!*', parse_mode='Markdown')
    else:
        markup = None
        answer = '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n–î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!'
        bot.send_message(chat_id, answer, reply_markup=markup, parse_mode='Markdown')
        ai_chat(message)
        return

    bot.send_message(chat_id, answer, reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
@bot.callback_query_handler(func=lambda call: call.data == 'new_chat_topic')
def choose_topic(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üë®‚Äçüíº –ë–∏–∑–Ω–µ—Å–º–µ–Ω', callback_data="topic_chat_businessman"))
    markup.add(types.InlineKeyboardButton('üë∂ –†–µ–±–µ–Ω–æ–∫', callback_data="topic_chat_kid"))
    markup.add(types.InlineKeyboardButton('üë®‚Äçüéì –ò—Å—Ç–æ—Ä–∏–∫', callback_data="topic_chat_history"))

    send_or_edit(call, bot, '*–í—ã–±–µ—Ä–∏ –∫—Ç–æ –±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è:*', markup=markup)

# –ù–æ–≤—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
@bot.callback_query_handler(func=lambda call: call.data.startswith('topic_chat'))
def ai_topic_chat(call):
    user_balance = check_balance(call)
    topic = call.data.split('_')[2]

    if user_balance < 5:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data="home"))
        message_text = text.not_enough_balance(user_balance)
        send_or_edit(call, bot, message_text, markup)
    else:
        msg = send_or_edit(call, bot, '–°—É–ø–µ—Ä! –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.')
        bot.register_next_step_handler(msg, send_message_to_gpt_topic, topic)

def send_message_to_gpt_topic(message, topic):
    chat_id = get_id(message)
    bot.delete_message(chat_id=chat_id, message_id=message.message_id-1)

    if message.content_type == 'text':
        answer = gpt.get_ai_answer(message.text, topic)
        if answer.startswith('ü§Ø '):
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data="home"))
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data="home"))
            answer += '\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ–π—á–∞—Å –±–æ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∏ –∑–∞–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å.'
            is_rewarded = gpt_used(message)
            if is_rewarded:
                bot.send_message(chat_id, '‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –º–Ω–æ–π!\n\n*–ó–∞ 5 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 1 –º–æ–Ω–µ—Ç—É!*', parse_mode='Markdown')
    else:
        markup = None
        answer = '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n–î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!'
        bot.send_message(chat_id, answer, reply_markup=markup, parse_mode='Markdown')
        ai_chat(message)
        return

    bot.send_message(chat_id, answer, reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@bot.callback_query_handler(func=lambda call: call.data == 'will_top_up')
def top_up_amount(call):
    chat_id = get_id(call)
    user_balance = check_balance(call)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚≠êÔ∏è 5', callback_data="top_up_5"))
    markup.add(types.InlineKeyboardButton('‚≠êÔ∏è 10', callback_data="top_up_10"))
    markup.add(types.InlineKeyboardButton('‚≠êÔ∏è 100', callback_data="top_up_100"))
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data="balance"))

    bot.edit_message_text(chat_id=chat_id, text=f'*ü´∞ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_balance}*\n\n–í—ã–±–µ—Ä–∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è üëá', message_id=call.message.message_id, reply_markup=markup, parse_mode='Markdown')

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('top_up_'))
def top_up_balance(call):
    chat_id = get_id(call)
    amount = int(call.data.split('_')[2])
    top_up(call, amount)
    user_balance = check_balance(call)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data="home"))
    markup.add(types.InlineKeyboardButton('üí∞ –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë!', callback_data="will_top_up"))

    bot.edit_message_text(chat_id=chat_id, text=f'*‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!*\n\n–°–µ–π—á–∞—Å –æ–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {user_balance}', message_id=call.message.message_id, parse_mode='Markdown', reply_markup=markup)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª dispatch.py
def send_any_message(chat_id, message_text):
    bot.send_message(chat_id, message_text, parse_mode='Markdown')
    logger.info(f'Message: "{message_text}" sent to User ID: {chat_id}')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info('Bot started')
    bot.infinity_polling(allowed_updates=['message', 'callback_query'], none_stop = True)
    logger.info('Bot stopped')